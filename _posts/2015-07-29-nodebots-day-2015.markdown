---
layout: post
title:  "NodeBots Day 2015"
date:   2015-07-29
categories: jekyll update
---
On Saturday, the 25th of July in 2015, a wondrous event took place in Mesa, AZ at [HeatSync Labs](http://www.heatsynclabs.org). 
This was none other than [NodeBots Day](https://github.com/nodebots/nodebotsday), a worldwide endeavor to create and learn through
the use of code and robots. Finding out about this event at a local Node meetup, my friend Richi and I paid our $10 entry fee for
tickets and showed up, not really knowing what to expect at first.

Then we were handed our kits. Immediately, both our eyes lit up when we realized what we were about to do and how awesome this day was about
to become. Our kit included a [chipKIT Uno32 Development Board](http://www.microchip.com/Developmenttools/ProductDetails.aspx?PartNO=TDGL002),
an [Actobots Peewee Runt Rover](https://www.servocity.com/html/peewee_runt_rovertm__637158_.html#.VbiaaBNViko), a USB connector cable, a
breadboard, batteries, and some small jumper cables. This was already well worth the price of entry.

![NodeBot Kit](/../images/nb1.jpg)

All built, it becomes a little 2-wheel platform of destruction. Later, sticking 2 yellow LED lights into the attached breadboard, I would end
up naming mine "El Tigre".

![El Tigre](/../images/nb2.jpg)

To put the icing on the already decadent cake, this was a Node event which means the code for controlling the bot is all written in JavaScript.
Using the [Johnny-Five](http://johnny-five.io/) JavaScript Robotics programming framework and the "keypress" npm module, one can easily 
control their robot with whichever pre-defined keys they chose.

Let's take a quick look at the steps to create the project and control our little robot:

1.) Initialize the project with NPM (Node Package Manager) and install Johnny-Five and keypress
*Note: Dependencies are saved in case one wants to make a GitHub project of it later
    
    npm init -y
    npm install Johnny-Five --save
    npm install keypress --save

2.) Make a new file, name it nodebot.js (or whatever suits you), and create the basic movement functionality
    
    var five = require('johnny-five');
    var keypress = require('keypress');
    var board = new five.Board();
    
    board.on('board', function() {
      var speed, commands, motors;
    
      speed = 100;
      commands = null;
      var motors = new five.Motors({
        five.Motor.SHIELD_CONFIGS.POLOLU_DRV8835_SHIELD.M1,
        five.Motor.SHIELD_CONFIGS.POLOLU_DRV8835_SHIELD.M2
        });
    
      this.repl.inject({
        mortors:motors
      });
    
      function controller(ch, key) {
        if (key) {
    
          if (key.name === 'space') {
            motors[0].stop();
            motors[1].stop();
          }
          if (key.name === 'up') {
            motors[0].fwd(speed);
            motors[1].fwd(speed);
          }
          if (key.name === 'down') {
            motors[0].rev(speed);
            motors[1].rev(speed);
          }
          if (key.name === 'left') {
            motors[0].fwd(speed * 0.75);
            motors[1].rev(speed * 0.75);
          }
          if (key.name === 'right') {
            motors[0].rev(speed * 0.75);
            motors[1].fwd(speed * 0.75);
          }
    
          commands = [].slice.call(arguments);
            } else {
          if (ch >= 1 && ch <= 9) {
            speed = five.Fn.scale(ch, 1, 9, 0, 255);
            controller.apply(null, commands);
          }
        }
      }
    
      keypress(process.stdin);
    
      process.stdin.on('keypress', controller);
      process.stdin.setRawMode(true);
      process.stdin.resume();
    });

Directional movement is great and all, but what about adjusting speed? Well, let's add a way to adjust the little guy's speed as well.

3.) In the controller function, inside the if(key) conditional statment, add the following if blocks
*Note: Just as with the directional keys, you have the freedom to assign whichever keys you like
    
    if(key.name === 'a') {
      speed += 50;
    }
    
    if (key.name === 'd') {
      speed -= 50;
    }

And there is a basic NodeBot with movement and speed controls!

At the end of the day, everyone entered their little NodeBot into a battlebot-style tournament where the winner was the one that successfully
pushed their opponent out of the designated ring. It was a great way to see our bots in action and the differences between them.

*Final two contestants in the NodeBot tournament*
![Final NodeBot Battle Contestants](/../images/nb3.jpg)

    
*End of the day Royal Rumble.*
![Royal Rumble](/../images/nb4.jpg "test")

This was a fantastic way to spend a Saturday by experimenting and learning something new. I'm looking forward to next year's NodeBot Day already, but 
in the meantime I think I will continue to enhance my little NodeBot so he can take on any new contenders.


[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help